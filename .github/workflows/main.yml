name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main  # 只在 main 分支的推送触发

jobs:
  checkout-code:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Check out code
        uses: actions/checkout@v2

  build-project:
    name: Build Project
    runs-on: ubuntu-latest
    needs: checkout-code  # 依赖于检出代码的任务
    steps:
      # 1. 检出代码
      - name: Check out code
        uses: actions/checkout@v2

      # 2. 设置 Java 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # 3. 构建项目
      - name: Build Project
        run: ./mvnw clean package --no-transfer-progress

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build-project  # 依赖于构建项目的任务
    steps:
      # 1. 检出代码
      - name: Check out code
        uses: actions/checkout@v2

      # 2. 设置 Java 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # 3. 运行测试
      - name: Run Tests
        run: ./mvnw test --no-transfer-progress

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: run-tests  # 依赖于运行测试的任务
    steps:
      # 1. 检出代码
      - name: Check out code
        uses: actions/checkout@v2

      # 2. 设置 Java 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # 3. 构建 Docker 镜像
      - name: Build Docker Image
        run: docker build -t your-dockerhub-username/your-image-name:latest .

      # 4. 登录 Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # 5. 推送 Docker 镜像到 Docker Hub
      - name: Push Docker Image
        run: docker push your-dockerhub-username/your-image-name:latest
